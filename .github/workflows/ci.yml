name: ci

on:
    push:
        branches: [main]
    pull_request:
        types: [opened, synchronize]

concurrency:
    group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
    cancel-in-progress: true

env:
    NEXT_TELEMETRY_DISABLED: 1
    NX_CLOUD_DISTRIBUTED_EXECUTION_AGENT_COUNT: 3
    NX_CLOUD_DISTRIBUTED_EXECUTION: true
    NX_CLOUD_DISTRIBUTED_EXECUTION_STOP_AGENTS_ON_FAILURE: true
    NX_EXEC: 'npx nx affected --nx-bail --base=$NX_BASE --head=$NX_HEAD --parallel=$NX_CLOUD_DISTRIBUTED_EXECUTION_AGENT_COUNT --target'
    CI: true

jobs:
    set-agents:
        runs-on: ubuntu-latest
        name: Set Agent Matrix
        outputs:
            matrix: ${{ steps.set-matrix.outputs.matrix }}
        steps:
            - name: Calculate Matrix
              id: set-matrix
              shell: bash
              run: |
                  AGENTS_JSON_ARRAY=$(node -e "console.log(JSON.stringify(Array.from(new Array($NX_CLOUD_DISTRIBUTED_EXECUTION_AGENT_COUNT)).map((_, i) => i + 1)));")
                  echo $AGENTS_JSON_ARRAY
                  echo "matrix=$AGENTS_JSON_ARRAY" >> $GITHUB_OUTPUT

#     main:
#         name: Main Job
#         runs-on: ubuntu-latest
#         defaults:
#             run:
#                 shell: bash
#         steps:
#             - name: Checkout [Pull Request]
#               uses: actions/checkout@v3
#               if: github.event_name == 'pull_request'
#               with:
#                   ref: ${{ github.event.pull_request.head.sha }}
#                   fetch-depth: 0

#             - name: Checkout [Main]
#               uses: actions/checkout@v3
#               if: github.event_name != 'pull_request'
#               with:
#                   fetch-depth: 0

#             - name: Install Node
#               uses: actions/setup-node@v3
#               with:
#                   node-version: 16

#             - name: Derive SHAs
#               uses: nrwl/nx-set-shas@v3

#             - name: Restore Node Cache
#               id: node_cache
#               uses: actions/cache/restore@v3
#               with:
#                   path: |
#                       ~/.cache/Cypress/
#                       dist/apps/clients/web/**/.next/cache
#                       node_modules/
#                   key: ubuntu-latest-node-${{ hashFiles('yarn.lock') }}
#                   restore-keys: ubuntu-latest-node-

#             - name: Restore Rust Cache
#               uses: actions/cache/restore@v3
#               with:
#                   path: |
#                       ~/.cargo/bin/
#                       ~/.cargo/registry/index/
#                       ~/.cargo/registry/cache/
#                       ~/.cargo/git/db/
#                       target/
#                   key: ubuntu-latest-cargo-${{ hashFiles('Cargo.lock') }}
#                   restore-keys: ubuntu-latest-cargo

#             - name: Install Node Dependencies
#               if: steps.node_cache.outputs.cache-hit != 'true'
#               run: yarn install --immutable

#             - name: Format Workspace
#               run: |
#                   npx nx-cloud record -- npx nx format:check --libs-and-apps --no-dte
#                   cargo fmt --all --check

#             - name: Lint Workspace
#               run: npx nx-cloud record -- npx nx workspace-lint --no-dte

#             - name: Start Agents
#               if: needs.agents.result != 'failure' && needs.agents.result != 'cancelled' && needs.agents.result != 'skipped'
#               run: npx nx-cloud start-ci-run --stop-agents-after=e2e

#             - name: Run Agents
#               id: agents
#               if: needs.agents.result != 'failure' && needs.agents.result != 'cancelled' && needs.agents.result != 'skipped'
#               uses: jameshenry/parallel-bash-commands@v1
#               with:
#                   cmd1: $NX_EXEC build --exclude=desktop-demo,web-demo
#                   cmd2: $NX_EXEC test --exclude=desktop-demo
#                   cmd3: $NX_EXEC lint --exclude=desktop-demo
#                   cmd4: npx nx affected --base=$NX_BASE --head=$NX_HEAD --parallel=1 --target=e2e

#             - name: Stop Agents
#               if: always()
#               run: npx nx-cloud stop-all-agents

#             - name: Abort Workflow
#               if: failure()
#               run: |
#                   curl -X POST -H "Authorization: Bearer ${{ github.token }}" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/cancel

#             - name: Delete Artifacts
#               if: failure()
#               uses: geekyeggo/delete-artifact@v2
#               with:
#                   name: '*'

#     agents:
#         name: Agent ${{ matrix.agent }}
#         needs: set-agents
#         runs-on: ubuntu-latest
#         defaults:
#             run:
#                 shell: bash
#         strategy:
#             matrix:
#                 agent:
#                     - ${{fromJson(needs.set-agents.outputs.matrix)}}
#         steps:
#             - name: Checkout [Pull Request]
#               uses: actions/checkout@v3
#               if: github.event_name == 'pull_request'
#               with:
#                   ref: ${{ github.event.pull_request.head.sha }}
#                   fetch-depth: 0

#             - name: Checkout [Main]
#               uses: actions/checkout@v3
#               if: github.event_name != 'pull_request'
#               with:
#                   fetch-depth: 0

#             - name: Derive SHAs
#               uses: nrwl/nx-set-shas@v3

#             - name: Install Protoc
#               uses: arduino/setup-protoc@master
#               with:
#                   repo-token: ${{ secrets.GITHUB_TOKEN }}

#             - name: Install Node
#               uses: actions/setup-node@v3
#               with:
#                   node-version: 16

#             - name: Restore Node Cache
#               id: node_cache
#               uses: actions/cache/restore@v3
#               with:
#                   path: |
#                       ~/.cache/Cypress/
#                       dist/apps/clients/web/**/.next/cache
#                       node_modules/
#                   key: ubuntu-latest-node-${{ hashFiles('yarn.lock') }}
#                   restore-keys: ubuntu-latest-node-

#             - name: Restore Rust Cache
#               id: rust_cache
#               uses: actions/cache/restore@v3
#               with:
#                   path: |
#                       ~/.cargo/bin/
#                       ~/.cargo/registry/index/
#                       ~/.cargo/registry/cache/
#                       ~/.cargo/git/db/
#                       target/
#                   key: ubuntu-latest-cargo-${{ hashFiles('Cargo.lock') }}
#                   restore-keys: ubuntu-latest-cargo

#             - name: Install Node Dependencies
#               if: steps.node_cache.outputs.cache-hit != 'true'
#               run: yarn install --immutable

#             - name: Run Agent
#               run: npx nx-cloud start-agent

#             - name: Abort Workflow
#               if: failure()
#               run: |
#                   curl -X POST -H "Authorization: Bearer ${{ github.token }}" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/cancel

#             - name: Delete Artifacts
#               if: failure()
#               uses: geekyeggo/delete-artifact@v2
#               with:
#                   name: '*'

#     apps:
#         name: Build Apps
#         runs-on: ${{ matrix.platform }}
#         strategy:
#             fail-fast: false
#             matrix:
#                 platform: [macos-12, ubuntu-latest, windows-latest]
#         defaults:
#             run:
#                 shell: bash
#         steps:
#             - name: Checkout [Pull Request]
#               uses: actions/checkout@v3
#               if: github.event_name == 'pull_request'
#               with:
#                   ref: ${{ github.event.pull_request.head.sha }}
#                   fetch-depth: 0

#             - name: Checkout [Main]
#               uses: actions/checkout@v3
#               if: github.event_name != 'pull_request'
#               with:
#                   fetch-depth: 0

#             - name: Rust Cache
#               uses: actions/cache@v3
#               with:
#                   path: |
#                       ~/.cargo/bin/
#                       ~/.cargo/registry/index/
#                       ~/.cargo/registry/cache/
#                       ~/.cargo/git/db/
#                       target/
#                   key: ${{ matrix.platform }}-cargo-${{ hashFiles('Cargo.lock') }}
#                   restore-keys: ${{ matrix.platform }}-cargo

#             - name: Node Cache
#               id: node_cache
#               uses: actions/cache@v3
#               with:
#                   path: |
#                       ~/.cache/Cypress/
#                       dist/apps/clients/web/**/.next/cache
#                       node_modules/
#                   key: ${{ matrix.platform }}-node-${{ hashFiles('yarn.lock') }}
#                   restore-keys: ${{ matrix.platform }}-node-

#             - name: Derive SHAs
#               uses: nrwl/nx-set-shas@v3

#             - name: Install Protoc
#               uses: arduino/setup-protoc@master
#               with:
#                   repo-token: ${{ secrets.GITHUB_TOKEN }}

#             - name: Install Node
#               uses: actions/setup-node@v3
#               with:
#                   node-version: 16

#             - name: Install Dependencies (ubuntu)
#               if: matrix.platform == 'ubuntu-latest'
#               run: |
#                   sudo apt-get update
#                   sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf

#             - name: Install Tauri CLI
#               run: cargo install tauri-cli || true

#             - name: Install Node Dependencies
#               if: steps.node_cache.outputs.cache-hit != 'true'
#               run: yarn install --immutable

#             - name: Export Web Apps
#               run: npx nx run-many --no-dte --target=export --projects="web-*" --exclude="web-landing" --parallel --skip-nx-cache

#             - name: Build Tauri Apps
#               run: npx nx run-many --no-dte --target=desktop --parallel --all --skip-nx-cache

#             - name: Package Mac Apps (macos only)
#               if: matrix.platform == 'macos-12'
#               run: |
#                   for folder in target/release/bundle/macos/*.app; do
#                     tar cvf "${folder}.tar" "$folder"
#                   done

#             - name: Upload Exported Web Apps
#               uses: actions/upload-artifact@v3
#               with:
#                   name: exported
#                   path: dist/apps/clients/web/**/exported

#             - name: Upload Desktop (ubuntu-latest)
#               if: matrix.platform == 'ubuntu-latest'
#               uses: actions/upload-artifact@v3
#               with:
#                   name: linux-desktop
#                   path: |
#                       target/release/bundle/appimage/*.AppImage
#                       target/release/bundle/deb/*.deb

#             - name: Upload Desktop (macos-12)
#               if: matrix.platform == 'macos-12'
#               uses: actions/upload-artifact@v3
#               with:
#                   name: macos-desktop
#                   path: |
#                       target/release/bundle/macos/*.app.tar
#                       target/release/bundle/dmg/*.dmg

#             - name: Upload Desktop (windows-latest)
#               if: matrix.platform == 'windows-latest'
#               uses: actions/upload-artifact@v3
#               with:
#                   name: windows-desktop
#                   path: |
#                       target/release/bundle/msi/*.msi

#             - name: Abort Workflow
#               if: failure()
#               run: |
#                   curl -X POST -H "Authorization: Bearer ${{ github.token }}" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/cancel

#             - name: Delete Artifacts
#               if: failure()
#               uses: geekyeggo/delete-artifact@v2
#               with:
#                   name: '*'

#     release:
#         name: Release
#         runs-on: ubuntu-latest
#         needs: [apps, main, agents]
#         defaults:
#             run:
#                 shell: bash
#         steps:
#             - name: Checkout
#               if: startsWith(github.ref, 'refs/heads/main')
#               uses: actions/checkout@v3
#               with:
#                   fetch-depth: 0
#                   token: ${{ secrets.GITHUB_TOKEN }}

#             - name: Restore Node Cache
#               id: node_cache
#               if: startsWith(github.ref, 'refs/heads/main')
#               uses: actions/cache/restore@v3
#               with:
#                   path: |
#                       ~/.cache/Cypress/
#                       dist/apps/clients/web/**/.next/cache
#                       node_modules/
#                   key: ubuntu-latest-node-${{ hashFiles('yarn.lock') }}
#                   restore-keys: ubuntu-latest-node-

#             - name: Install Node
#               if: startsWith(github.ref, 'refs/heads/main')
#               uses: actions/setup-node@v3
#               with:
#                   node-version: 16

#             - name: Install Node Dependencies
#               if: steps.node_cache.outputs.cache-hit != 'true' && startsWith(github.ref, 'refs/heads/main')
#               run: yarn install --immutable

#             - name: Setup Git
#               if: startsWith(github.ref, 'refs/heads/main')
#               uses: fregante/setup-git-user@v1

#             - name: Prepare Release
#               if: startsWith(github.ref, 'refs/heads/main')
#               run: yarn bump --no-dte

#             - name: Extract version
#               id: extract_version
#               if: startsWith(github.ref, 'refs/heads/main')
#               run: |
#                   version=$(git describe --tags $(git rev-list --tags --max-count=1))
#                   echo $version
#                   echo "version=$version" >> $GITHUB_OUTPUT

#             - name: Download Desktop (ubuntu-latest)
#               if: startsWith(github.ref, 'refs/heads/main')
#               uses: actions/download-artifact@v3
#               with:
#                   name: linux-desktop

#             - name: Download Desktop (macos-12)
#               if: startsWith(github.ref, 'refs/heads/main')
#               uses: actions/download-artifact@v3
#               with:
#                   name: macos-desktop

#             - name: Download Desktop (windows-latest)
#               if: startsWith(github.ref, 'refs/heads/main')
#               uses: actions/download-artifact@v3
#               with:
#                   name: windows-desktop

#             - name: Generate Release Body
#               id: release_body
#               if: startsWith(github.ref, 'refs/heads/main')
#               run: npx extract-changelog-release > RELEASE_BODY.md

#             - name: Release
#               if: startsWith(github.ref, 'refs/heads/main')
#               uses: ncipollo/release-action@v1.12.0
#               with:
#                   token: ${{ secrets.REPO_GITHUB_TOKEN }}
#                   tag: ${{ steps.extract_version.outputs.version }}
#                   artifactErrorsFailBuild: true
#                   skipIfReleaseExists: true
#                   bodyFile: RELEASE_BODY.md
#                   artifacts: |
#                       appimage/*.AppImage
#                       deb/*.deb
#                       macos/*.app.tar
#                       dmg/*.dmg
#                       *.msi

#             - name: Delete Artifacts
#               if: failure()
#               uses: geekyeggo/delete-artifact@v2
#               with:
#                   name: '*'

#             - name: Abort Workflow
#               if: failure()
#               run: |
#                   curl -X POST -H "Authorization: Bearer ${{ github.token }}" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/cancel

#     deploy:
#         name: Deploy Web Apps
#         runs-on: ubuntu-latest
#         needs: [main, agents, apps, release]
#         permissions:
#             contents: 'read'
#             id-token: 'write'
#         defaults:
#             run:
#                 shell: bash
#         steps:
#             - name: Checkout [Pull Request]
#               uses: actions/checkout@v3
#               if: github.event_name == 'pull_request'
#               with:
#                   ref: ${{ github.event.pull_request.head.sha }}
#                   fetch-depth: 0

#             - name: Checkout [Main]
#               uses: actions/checkout@v3
#               if: github.event_name != 'pull_request'
#               with:
#                   fetch-depth: 0

#             - name: Authenticate to Google Cloud
#               id: auth
#               uses: google-github-actions/auth@v1
#               with:
#                   token_format: access_token
#                   credentials_json: ${{ secrets.GCP_SA_KEY }}

#             - name: Set up Cloud SDK
#               uses: google-github-actions/setup-gcloud@v1

#             - name: Setup Docker Artifact Registry Auth
#               run: gcloud auth configure-docker europe-west3-docker.pkg.dev

#             - name: Derive SHAs
#               uses: nrwl/nx-set-shas@v3

#             - name: Set up Docker Buildx
#               uses: docker/setup-buildx-action@v2

#             - name: Restore Node Cache
#               id: node_cache
#               uses: actions/cache/restore@v3
#               with:
#                   path: |
#                       ~/.cache/Cypress/
#                       dist/apps/clients/web/**/.next/cache
#                       node_modules/
#                   key: ubuntu-latest-node-${{ hashFiles('yarn.lock') }}
#                   restore-keys: ubuntu-latest-node-

#             - name: Restore Rust Cache
#               uses: actions/cache/restore@v3
#               with:
#                   path: |
#                       ~/.cargo/bin/
#                       ~/.cargo/registry/index/
#                       ~/.cargo/registry/cache/
#                       ~/.cargo/git/db/
#                       target/
#                   key: ubuntu-latest-cargo-${{ hashFiles('Cargo.lock') }}
#                   restore-keys: ubuntu-latest-cargo

#             - name: Install Node
#               uses: actions/setup-node@v3
#               with:
#                   node-version: 16

#             - name: Install Protoc
#               uses: arduino/setup-protoc@master
#               with:
#                   repo-token: ${{ secrets.GITHUB_TOKEN }}

#             - name: Install Node Dependencies
#               if: steps.node_cache.outputs.cache-hit != 'true'
#               run: yarn install --immutable

#             - name: Install Firebase
#               run: npm i -g firebase-tools

#             - name: Download Exported Web Apps
#               uses: actions/download-artifact@v3
#               with:
#                   name: exported
#                   path: dist/apps/clients/web

#             - name: Build Apps (standalone)
#               run: |
#                   npx nx run-many \
#                       --target=build \
#                       --no-dte \
#                       --projects="web-*" \
#                       --exclude=web-landing \
#                       --skip-nx-cache \
#                       --output-style=stream

#             - name: Deploy Docker Images on PR (Development)
#               if: github.event.pull_request.head.repo.full_name == github.repository
#               run: |
#                   INPUT_GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
#                   INPUT_TAGS="sha-$NX_HEAD" \
#                   npx nx affected \
#                       --base=$NX_BASE \
#                       --head=$NX_HEAD \
#                       --target=docker \
#                       --no-dte \
#                       --skip-nx-cache \
#                       --output-style=stream

#             - name: Deploy Docker Images on Main (Production)
#               if: github.event_name != 'pull_request' && github.ref_name == 'main'
#               run: |
#                   INPUT_GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
#                   INPUT_TAGS="sha-$NX_HEAD" \
#                   npx nx affected \
#                     --base=$NX_BASE \
#                     --head=$NX_HEAD \
#                     --target=docker \
#                     --no-dte \
#                     --configuration=production \
#                     --skip-nx-cache \
#                     --output-style=stream

#             - name: Deploy to Cloud Run on PR (Development)
#               if: github.event.pull_request.head.repo.full_name == github.repository
#               run: |
#                   npx nx affected \
#                       --base=$NX_BASE \
#                       --head=$NX_HEAD \
#                       --target=deploy \
#                       --no-dte \
#                       --skip-nx-cache \
#                       --output-style=stream \
#                       development

#             - name: Deploy to Cloud Run on Main (Production)
#               if: github.event_name != 'pull_request' && github.ref_name == 'main'
#               run: |
#                   npx nx affected \
#                       --base=$NX_BASE \
#                       --head=$NX_HEAD \
#                       --target=deploy \
#                       --no-dte \
#                       --skip-nx-cache \
#                       --output-style=stream \
#                       production

#             - name: Deploy to Firebase Hosting on PR (Development)
#               if: github.event.pull_request.head.repo.full_name == github.repository
#               run: |
#                   npx nx affected \
#                       --base=$NX_BASE \
#                       --head=$NX_HEAD \
#                       --target=firebase \
#                       --no-dte \
#                       --skip-nx-cache \
#                       --output-style=stream \
#                       development

#             - name: Deploy to Firebase Hosting on Main (Production)
#               if: github.event_name != 'pull_request' && github.ref_name == 'main'
#               run: |
#                   npx nx affected \
#                       --base=$NX_BASE \
#                       --head=$NX_HEAD \
#                       --target=firebase \
#                       --no-dte \
#                       --skip-nx-cache \
#                       --output-style=stream \
#                       production

#             - name: Delete Artifacts
#               if: failure()
#               uses: geekyeggo/delete-artifact@v2
#               with:
#                   name: '*'

#             - name: Abort Workflow
#               if: failure()
#               run: |
#                   curl -X POST -H "Authorization: Bearer ${{ github.token }}" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/cancel

#     cleanup:
#         name: Cleanup
#         runs-on: ubuntu-latest
#         needs: [deploy]
#         steps:
#             - name: Delete Artifacts
#               uses: geekyeggo/delete-artifact@v2
#               with:
#                   name: '*'
